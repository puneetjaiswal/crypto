package com.crypto;


import java.nio.charset.Charset;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.StringUtils;

/**
 * Represents private key belonging to a service account
 *
 */
public class ServicePrivateKey {
	
	private static final String KEY_ALGO_NAME="keyAlgoName";
	private static final String KEY_ENCODING_FORMAT="keyEncodingFormat";
	private static final String ENCODED_KEY_TEXT="encoding";
	
	private String privateKeyAlgoName;
	private String privateKeyEncodingFormat;
	private byte[] privateKey;
	
	public ServicePrivateKey(){}
	
	public ServicePrivateKey(String encodedKey)
	{
		byte[] encodedBytes=Base64.decodeBase64(encodedKey);
		String plainTextString = StringUtils.newStringUtf8(encodedBytes);
		int keyAlgoNameIndex=plainTextString.indexOf(KEY_ALGO_NAME);
		int keyEncodingFormatIndex=plainTextString.indexOf(KEY_ENCODING_FORMAT);
		int encodedKeyTextIndex=plainTextString.indexOf(ENCODED_KEY_TEXT);
		privateKeyAlgoName=plainTextString.substring(plainTextString.indexOf('=', keyAlgoNameIndex)+1, plainTextString.indexOf('\t', keyAlgoNameIndex));
		privateKeyEncodingFormat=plainTextString.substring(plainTextString.indexOf('=', keyEncodingFormatIndex)+1, plainTextString.indexOf('\t', keyEncodingFormatIndex));
		String base64EncodedKey=plainTextString.substring(plainTextString.indexOf('=', encodedKeyTextIndex)+1, plainTextString.indexOf('\t', encodedKeyTextIndex));
		privateKey=Base64.decodeBase64(base64EncodedKey);
	}
	/**
	 * Gets algorithm name for the generated private key
	 * @return
	 */
	public String getPrivateKeyAlgoName() {
		return privateKeyAlgoName;
	}
	/**
	 * Sets algorithm name for the generated private key. Client application should not set this field
	 * @param privateKeyAlgoName
	 */
	public void setPrivateKeyAlgoName(String privateKeyAlgoName) {
		this.privateKeyAlgoName = privateKeyAlgoName;
	}
	/**
	 * Gets encoding format for the private key bytes returned by IAM service.
	 * @return
	 */
	public String getPrivateKeyEncodingFormat() {
		return privateKeyEncodingFormat;
	}
	/**
	 * Sets encoding format for the private key bytes returned by IAM service. Client application
	 * should not set this field
	 * @param privateKeyEncodingFormat
	 */
	public void setPrivateKeyEncodingFormat(String privateKeyEncodingFormat) {
		this.privateKeyEncodingFormat = privateKeyEncodingFormat;
	}
	/**
	 * Gets encoded bytes of the private key generated by IAM service. This private key belongs to 
	 * service account represented by this DTO
	 * @return
	 */
	public byte[] getEncoded() {
		return privateKey;
	}
	/**
	 * Sets private key bytes belonging to this service. Client application should not set this field
	 * @param privateKey
	 */
	public void setEncoded(byte[] privateKey) {
		this.privateKey = privateKey;
	}
	
	@Override
	public String toString()
	{
		StringBuffer stringBuffer=new StringBuffer();
		stringBuffer.append(KEY_ALGO_NAME).append("=").append(privateKeyAlgoName).append("\t");
		stringBuffer.append(KEY_ENCODING_FORMAT).append("=").append(privateKeyEncodingFormat).append("\t");
		stringBuffer.append(ENCODED_KEY_TEXT).append("=").append(Base64.encodeBase64String(privateKey)).append("\t");
		String encodedString=Base64.encodeBase64String(stringBuffer.toString().getBytes(Charset.forName("UTF-8")));
		return encodedString;
	}
	
}
